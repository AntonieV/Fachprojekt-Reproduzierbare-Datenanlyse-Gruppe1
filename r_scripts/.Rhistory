library(rsvg)
library(png)
library(grid)
library(gridExtra)
install.packages("librsvg")  #Installation on Windows
install.packages("rsvg")
library(rsvg)
install.packages("rsvg")
install.packages("librsvg")  #Installation on Windows
library(rsvg)
library(librsvg)
library(png)
library(grid)
library(gridExtra)
#####################################################################################
################### NUR ZUM TESTEN: Erzeugen von Test-svg-Dateien ###################
#x <- rnorm(10000)
#cols <- c("red", "blue", "green", "yellow")
#for (i in seq(along=cols)){
#  svg(filename = gsub(" ", "", paste(as.character(i),".svg")))
#  par(bg = cols[i])
#  plot(x)
#  dev.off()
#}
#####################################################################################
#####################################################################################
path <- "../plots"
#path <- snakemake@input[["plots"]]
svg_files <- unlist(list.files(path, pattern = ".*\\.svg$"))
plots_png <- lapply (1:length(svg_files), function(i){
out_file <- gsub(" ","", paste(strsplit(svg_files[i], "\\.")[[1]][1], ".png"))
rsvg_png(svg_files[i], out_file)
})
png_files <- unlist(list.files(getwd(), pattern = ".*\\.png$"))
pdf("../plots/rna-seq_plots.pdf")
#pdf(file=snakemake@output[[1]])
for (i in seq(along=png_files)){
im <- rasterGrob(readPNG(png_files[i], native = FALSE), interpolate = FALSE)
do.call(grid.arrange, c(list(im), ncol = 1))
}
dev.off()
#x <- "test"
#pdf("test.pdf")#,width=5,height=5)
#plot.new()
#plot(NA, xlim=c(0,5), ylim=c(0,5), bty='n',
#     xaxt='n', yaxt='n', xlab='', ylab='')
#text(x, pos = 1)
#cat(x)
#dev.off()
#pdf("test.pdf", height=13.7, paper="special")
#par(mfrow=c(1,2), oma=c(0,0,3,0),cex=0.5)
#plot.new()
#tx <- file("../sleuth/p-values_all_transcripts.csv", "r")
#while(length(line <- readLines(tx, 1)) > 0) {
#  text(line, "\n")
#}
#mtext("A nice-looking paragraph! Now this is what I call good advice!")
#dev.off()
delete_png <- file.remove(png_files)
### Test-svg-Dateien entfernen
### Eingabepfade und Speicherort muessen noch angepasst werden
#librsvg2-dev         #Installation from source on Linux or OSX
#librsvg2-devel       #On Fedora, CentOS or RHEL
#librsvg              #On OS-X
#install.packages("rsvg")  #Installation on Windows
#install.packages("png")
#install.packages("grid")
#install.packages("gridExtra")
library(rsvg)
library(png)
library(grid)
library(gridExtra)
#####################################################################################
################### NUR ZUM TESTEN: Erzeugen von Test-svg-Dateien ###################
#x <- rnorm(10000)
#cols <- c("red", "blue", "green", "yellow")
#for (i in seq(along=cols)){
#  svg(filename = gsub(" ", "", paste(as.character(i),".svg")))
#  par(bg = cols[i])
#  plot(x)
#  dev.off()
#}
#####################################################################################
#####################################################################################
path <- "../plots"
#path <- snakemake@input[["plots"]]
svg_files <- unlist(list.files(path, pattern = ".*\\.svg$"))
plots_png <- lapply (1:length(svg_files), function(i){
out_file <- gsub(" ","", paste(strsplit(svg_files[i], "\\.")[[1]][1], ".png"))
rsvg_png(svg_files[i], out_file)
})
png_files <- unlist(list.files(getwd(), pattern = ".*\\.png$"))
pdf("../plots/rna-seq_plots.pdf")
#pdf(file=snakemake@output[[1]])
for (i in seq(along=png_files)){
im <- rasterGrob(readPNG(png_files[i], native = FALSE), interpolate = FALSE)
do.call(grid.arrange, c(list(im), ncol = 1))
}
dev.off()
#x <- "test"
#pdf("test.pdf")#,width=5,height=5)
#plot.new()
#plot(NA, xlim=c(0,5), ylim=c(0,5), bty='n',
#     xaxt='n', yaxt='n', xlab='', ylab='')
#text(x, pos = 1)
#cat(x)
#dev.off()
#pdf("test.pdf", height=13.7, paper="special")
#par(mfrow=c(1,2), oma=c(0,0,3,0),cex=0.5)
#plot.new()
#tx <- file("../sleuth/p-values_all_transcripts.csv", "r")
#while(length(line <- readLines(tx, 1)) > 0) {
#  text(line, "\n")
#}
#mtext("A nice-looking paragraph! Now this is what I call good advice!")
#dev.off()
delete_png <- file.remove(png_files)
install.packages("rsvg-convert")  #Installation on Windows
install.packages("rsvg")  #Installation on Windows
library(rsvg)
library(librsvg)
install.packages("librsvg")
install.packages("rsvg")  #Installation on Windows
install.packages("librsvg2-dev")
install.packages("librsvg2-devel")
#install.packages("librsvg2-devel")
#install.packages("rsvg")  #Installation on Windows
#install.packages("png")
#install.packages("grid")
#install.packages("gridExtra")
install.packages("convertGraph")
#library(rsvg)
library(convertGraph)
### Test-svg-Dateien entfernen
### Eingabepfade und Speicherort muessen noch angepasst werden
#librsvg2-dev         #Installation from source on Linux or OSX
#librsvg2-devel       #On Fedora, CentOS or RHEL
#librsvg              #On OS-X
#install.packages("librsvg2-devel")
#install.packages("rsvg")  #Installation on Windows
#install.packages("png")
#install.packages("grid")
#install.packages("gridExtra")
install.packages("convertGraph")
#library(rsvg)
library(convertGraph)
library(png)
library(grid)
library(gridExtra)
#####################################################################################
################### NUR ZUM TESTEN: Erzeugen von Test-svg-Dateien ###################
#x <- rnorm(10000)
#cols <- c("red", "blue", "green", "yellow")
#for (i in seq(along=cols)){
#  svg(filename = gsub(" ", "", paste(as.character(i),".svg")))
#  par(bg = cols[i])
#  plot(x)
#  dev.off()
#}
#####################################################################################
#####################################################################################
path <- "../plots"
#path <- snakemake@input[["plots"]]
svg_files <- unlist(list.files(path, pattern = ".*\\.svg$"))
plots_png <- lapply (1:length(svg_files), function(i){
out_file <- gsub(" ","", paste(strsplit(svg_files[i], "\\.")[[1]][1], ".png"))
convertGraph(from = svg_files[i], to = out_file)
})
png_files <- unlist(list.files(getwd(), pattern = ".*\\.png$"))
pdf("../plots/rna-seq_plots.pdf")
#pdf(file=snakemake@output[[1]])
for (i in seq(along=png_files)){
im <- rasterGrob(readPNG(png_files[i], native = FALSE), interpolate = FALSE)
do.call(grid.arrange, c(list(im), ncol = 1))
}
dev.off()
#x <- "test"
#pdf("test.pdf")#,width=5,height=5)
#plot.new()
#plot(NA, xlim=c(0,5), ylim=c(0,5), bty='n',
#     xaxt='n', yaxt='n', xlab='', ylab='')
#text(x, pos = 1)
#cat(x)
#dev.off()
#pdf("test.pdf", height=13.7, paper="special")
#par(mfrow=c(1,2), oma=c(0,0,3,0),cex=0.5)
#plot.new()
#tx <- file("../sleuth/p-values_all_transcripts.csv", "r")
#while(length(line <- readLines(tx, 1)) > 0) {
#  text(line, "\n")
#}
#mtext("A nice-looking paragraph! Now this is what I call good advice!")
#dev.off()
delete_png <- file.remove(png_files)
### Test-svg-Dateien entfernen
### Eingabepfade und Speicherort muessen noch angepasst werden
#librsvg2-dev         #Installation from source on Linux or OSX
#librsvg2-devel       #On Fedora, CentOS or RHEL
#librsvg              #On OS-X
#install.packages("librsvg2-devel")
#install.packages("rsvg")  #Installation on Windows
#install.packages("png")
#install.packages("grid")
#install.packages("gridExtra")
#install.packages("convertGraph")
#library(rsvg)
library(convertGraph)
library(png)
library(grid)
library(gridExtra)
#####################################################################################
################### NUR ZUM TESTEN: Erzeugen von Test-svg-Dateien ###################
#x <- rnorm(10000)
#cols <- c("red", "blue", "green", "yellow")
#for (i in seq(along=cols)){
#  svg(filename = gsub(" ", "", paste(as.character(i),".svg")))
#  par(bg = cols[i])
#  plot(x)
#  dev.off()
#}
#####################################################################################
#####################################################################################
path <- "../plots"
#path <- snakemake@input[["plots"]]
svg_files <- unlist(list.files(path, pattern = ".*\\.svg$"))
plots_png <- lapply (1:length(svg_files), function(i){
out_file <- gsub(" ","", paste(strsplit(svg_files[i], "\\.")[[1]][1], ".png"))
convertGraph(from = svg_files[i], to = out_file)
})
png_files <- unlist(list.files(getwd(), pattern = ".*\\.png$"))
pdf("../plots/rna-seq_plots.pdf")
#pdf(file=snakemake@output[[1]])
for (i in seq(along=png_files)){
im <- rasterGrob(readPNG(png_files[i], native = FALSE), interpolate = FALSE)
do.call(grid.arrange, c(list(im), ncol = 1))
}
dev.off()
#x <- "test"
#pdf("test.pdf")#,width=5,height=5)
#plot.new()
#plot(NA, xlim=c(0,5), ylim=c(0,5), bty='n',
#     xaxt='n', yaxt='n', xlab='', ylab='')
#text(x, pos = 1)
#cat(x)
#dev.off()
#pdf("test.pdf", height=13.7, paper="special")
#par(mfrow=c(1,2), oma=c(0,0,3,0),cex=0.5)
#plot.new()
#tx <- file("../sleuth/p-values_all_transcripts.csv", "r")
#while(length(line <- readLines(tx, 1)) > 0) {
#  text(line, "\n")
#}
#mtext("A nice-looking paragraph! Now this is what I call good advice!")
#dev.off()
delete_png <- file.remove(png_files)
library(convertGraph)
library(png)
library(grid)
library(gridExtra)
#####################################################################################
################### NUR ZUM TESTEN: Erzeugen von Test-svg-Dateien ###################
#x <- rnorm(10000)
#cols <- c("red", "blue", "green", "yellow")
#for (i in seq(along=cols)){
#  svg(filename = gsub(" ", "", paste(as.character(i),".svg")))
#  par(bg = cols[i])
#  plot(x)
#  dev.off()
#}
#####################################################################################
#####################################################################################
path <- "../plots"
#path <- snakemake@input[["plots"]]
svg_files <- unlist(list.files(path, pattern = ".*\\.svg$"))
plots_png <- lapply (1:length(svg_files), function(i){
out_file <- gsub(" ","", paste(strsplit(svg_files[i], "\\.")[[1]][1], ".png"))
convertGraph(from = svg_files[i], to = out_file)
})
### Test-svg-Dateien entfernen
### Eingabepfade und Speicherort muessen noch angepasst werden
#librsvg2-dev         #Installation from source on Linux or OSX
#librsvg2-devel       #On Fedora, CentOS or RHEL
#librsvg              #On OS-X
#install.packages("librsvg2-devel")
#install.packages("rsvg")  #Installation on Windows
#install.packages("png")
#install.packages("grid")
#install.packages("gridExtra")
#install.packages("convertGraph")
#library(rsvg)
library(convertGraph)
library(png)
library(grid)
library(gridExtra)
#####################################################################################
################### NUR ZUM TESTEN: Erzeugen von Test-svg-Dateien ###################
#x <- rnorm(10000)
#cols <- c("red", "blue", "green", "yellow")
#for (i in seq(along=cols)){
#  svg(filename = gsub(" ", "", paste(as.character(i),".svg")))
#  par(bg = cols[i])
#  plot(x)
#  dev.off()
#}
#####################################################################################
#####################################################################################
path <- "../plots"
#path <- snakemake@input[["plots"]]
svg_files <- unlist(list.files(path, pattern = ".*\\.svg$"))
plots_png <- lapply (1:length(svg_files), function(i){
out_file <- gsub(" ","", paste(strsplit(svg_files[i], "\\.")[[1]][1], ".png"))
convertGraph(from = svg_files[i], to = out_file, path = NULL)
})
#install.packages("librsvg2-devel")
#install.packages("rsvg")  #Installation on Windows
#install.packages("png")
#install.packages("grid")
#install.packages("gridExtra")
#install.packages("convertGraph")
install.packages("magick")
install.packages("magick")
#library(rsvg)
library(magick)
#install.packages("librsvg2-devel")
#install.packages("rsvg")  #Installation on Windows
#install.packages("png")
#install.packages("grid")
#install.packages("gridExtra")
#install.packages("convertGraph")
install.packages("libmagick")
#install.packages("librsvg2-devel")
#install.packages("rsvg")  #Installation on Windows
#install.packages("png")
#install.packages("grid")
#install.packages("gridExtra")
#install.packages("convertGraph")
install.packages("libmagick++-dev")
install.packages("librsvg2")
install.packages("rsvg")  #Installation on Windows
install.packages("RSvgDevice")
install.packages("rsvg")  #Installation on Windows
library(RSvgDevice)
library(rsvg)
library(RSvgDevice)
#library(libmagick)
library(convertGraph)
library(png)
library(grid)
library(gridExtra)
#####################################################################################
################### NUR ZUM TESTEN: Erzeugen von Test-svg-Dateien ###################
#x <- rnorm(10000)
#cols <- c("red", "blue", "green", "yellow")
#for (i in seq(along=cols)){
#  svg(filename = gsub(" ", "", paste(as.character(i),".svg")))
#  par(bg = cols[i])
#  plot(x)
#  dev.off()
#}
#####################################################################################
#####################################################################################
path <- "../plots"
#path <- snakemake@input[["plots"]]
svg_files <- unlist(list.files(path, pattern = ".*\\.svg$"))
plots_png <- lapply (1:length(svg_files), function(i){
out_file <- gsub(" ","", paste(strsplit(svg_files[i], "\\.")[[1]][1], ".png"))
convertGraph(from = svg_files[i], to = out_file, path = NULL)
})
png_files <- unlist(list.files(getwd(), pattern = ".*\\.png$"))
#library(rsvg)
#library(convertGraph)
library(svglite)
install.packages("svglite")
library(svglite)
library(rsvg)
#install.packages("librsvg2-devel")
install.packages("rsvg")  #Installation on Windows
BiocManager::install("gage", version = "3.8")
#BiocManager::install("gage", version = "3.8")
library("gage")
#BiocManager::install("gage", version = "3.8")
library("gage")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("gage", version = "3.8")
library("gage")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("gage", version = "2.30")
BiocManager::install("gage", version = "3.8")
install.packages("curl")
getwd()
p_all <- read.table("../sleuth/p-values_all_transcripts.csv", header=TRUE)
matr <- read.table("../sleuth/sleuth_matrix.csv", header=TRUE)
samples <- read.table("../table_for_reads.csv", header=TRUE, stringsAsFactors = TRUE)
library(dplyr)
#p_all ist nach pval sortiert, wird nun wie Matrix nach Gen-ID angeordnet:
p_all <- dplyr::arrange(p_all, target_id)
View(p_all)
gage.data <- data.frame(TragetID = p_all$target_id, EnsembleID = p_all$ens_gene, GeneID = p_all$ext_gene, log2FoldChange = log2FC,
pVal = p_val, PostHoc_pValues = q_val, Mean = p_all$mean_obs)
stop("Die Datenmatrix mit der Anzahl der Counts und der Datensatz
der Signifikanzanalyse aus Sluth sind verschieden!")
quit(status = 1, runLast = FALSE)
#if (!requireNamespace("BiocManager", quietly = TRUE))
#  install.packages("BiocManager")
#BiocManager::install("gage", version = "3.8")
library(gage)
library(dplyr)
p_all <- read.table("../sleuth/p-values_all_transcripts.csv", header=TRUE)
matr <- read.table("../sleuth/sleuth_matrix.csv", header=TRUE)
samples <- read.table("../table_for_reads.csv", header=TRUE, stringsAsFactors = TRUE)
#p_all <- read.table(snakemake@input[["pval"]], header=TRUE)
#matr <- read.table(snakemake@input[["matrix"]], header=TRUE)
#samples <- read.table(snakemake@input[["samples"]], header=TRUE, stringsAsFactors = TRUE)
#p_all ist nach pval sortiert, wird nun wie Matrix nach Gen-ID angeordnet:
p_all <- dplyr::arrange(p_all, target_id)
if(any(p_all$target_id != row.names(matr))){
stop("Die Datenmatrix mit der Anzahl der Counts und der Datensatz
der Signifikanzanalyse aus Sluth sind verschieden!")
quit(status = 1, runLast = FALSE)
}
#Ersetzen der target_id durch Gen-Namen
rownames(matr) = make.names(p_all$ext_gene, unique = TRUE)
condition_1 <- samples$sample[samples$condition == as.character(factor(samples$condition)[1])]
condition_2 <- samples$sample[samples$condition == as.character(factor(samples$condition)[2])]
samples.cond_1 <- matr[][as.character(samples$sample[condition_1])]
samples.cond_2 <- matr[][as.character(samples$sample[condition_2])]
#log2-FoldChange
FoldChange <- rowSums(samples.cond_2)/rowSums(samples.cond_1)
log2FC <- log2(FoldChange)
p_val <- p_all$pval
q_val <- p_all$qval
#ungueltige Werte anpassen, Intervall des Definitionsbereichs bestimmen
log2FC[which(is.nan(log2FC))] = 0
log2FC[which(is.na(log2FC))] = 0
p_val[which(is.nan(p_val))] = 0
p_val[which(is.na(p_val))] = 0
q_val[which(is.nan(q_val))] = 0
q_val[which(is.na(q_val))] = 0
#Anlegen des Dataframes fuer den Gage mit:
#Gen/Target-ID,
#FoldChange(log2),
#p-Werten aus der Sleuth-Analyse und
#den durch Post-Hoc-Tests normaliesierten p-Werten (qval, also Korrektur der
#Alphafehler-Kumulierung beim multiplen Testen) aus der Sleuth-Analyse
gage.data <- data.frame(TragetID = p_all$target_id, EnsembleID = p_all$ens_gene,
GeneID = p_all$ext_gene, log2FoldChange = log2FC,
pVal = p_val, PostHoc_pValues = q_val, Mean = p_all$mean_obs)
library(gageData)
#if (!requireNamespace("BiocManager", quietly = TRUE))
#  install.packages("BiocManager")
#BiocManager::install("gage", version = "3.8")
BiocManager::install("gageData", version = "3.8")
BiocManager::install("pathview", version = "3.8")
library(gageData)
library(pathview)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#BiocManager::install("gage", version = "3.8")
#BiocManager::install("gageData", version = "3.8")
BiocManager::install("pathview", version = "3.8")
#BiocManager::install("gage", version = "3.8")
#BiocManager::install("gageData", version = "3.8")
install.packages("XML")
BiocManager::install("pathview", version = "3.8")
BiocManager::install("KEGGgraph", version = "3.8")
install.packages("XML")
BiocManager::install("KEGGgraph", version = "3.8")
BiocManager::install("pathview", version = "3.8")
library(gageData)
library(pathview)
library(dplyr)
data(kegg.sets.hs)
data(sigmet.idx.hs)
kegg.sets.hs <- kegg.sets.hs[sigmet.idx.hs]
# Get the results
keggres <- gage(foldchanges, gsets=kegg.sets.hs, same.dir=TRUE)
# Look at both up (greater), down (less), and statatistics.
lapply(keggres, head)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("gage", version = "3.8")
BiocManager::install("gageData", version = "3.8")
install.packages("XML")
BiocManager::install("KEGGgraph", version = "3.8")
BiocManager::install("pathview", version = "3.8")
library(gage)
library(gageData)
library(pathview)
library(dplyr)
install.packages("/home/tharja/Schreibtisch/Software/XML_3.98-1.16.tar.gz", repos = NULL)
install.packages("~/Schreibtisch/Software/XML_3.98-1.16.tar.gz", repos = NULL, type = "source")
install.packages("XML")
install.packages("XML")
BiocManager::install("gage", version = "3.8")
BiocManager::install("gageData", version = "3.8")
BiocManager::install("KEGGgraph", version = "3.8")
.libPaths()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("gage", version = "3.8")
BiocManager::install("gageData", version = "3.8")
install.packages("XML")
BiocManager::install("KEGGgraph", version = "3.8")
BiocManager::install("pathview", version = "3.8")
install.packages("/home/tharja/Schreibtisch/Software/XML_3.98-1.16.tar.gz", repos = NULL)
library(gage)
library(gageData)
library(pathview)
library(dplyr)
install.packages("libxml2")
